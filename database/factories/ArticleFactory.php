<?php

namespace Database\Factories;

use App\Enums\ArticleTypeEnum;
use App\Enums\DiskEnum;
use App\Enums\MediaCollectionEnum;
use App\Models\Article;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends Factory<Article>
 */
class ArticleFactory extends Factory
{
    private array $reviewableProducts = [
        'OnePlus 8T',
        'OnePlus 8 Pro',
        'Samsung Galaxy S20',
        'Samsung Galaxy S20+',
        'LG G8X ThinQ',
        'LG V60 ThinQ',
        'Sony WH-1000XM4',
        'Sony WH-1000XM3',
        'IPhone 12 Pro',
        'IPhone 12 Pro Max',
        'Logitech MX Master 3',
        'Corsair K95 RGB Platinum XT',
        'Soundblaster Katana',
        'Macbook Pro 16',
        'Dell XPS 13',
        'Dell XPS 15',
    ];

    public function definition(): array
    {
        $product = random($this->reviewableProducts);

        return [
            'title'           => "{$product} Review",
            'excerpt'         => $this->generateExcerpt($product),
            //'slug'            => Str::slug($title), //autogenerated
            'body'            => $this->generateBody($product),
            'article_type_id' => ArticleTypeEnum::random()->getId(),

            //dates between now and 30 days ago
            'created_at'      => $created_at = now()->subDays(random_int(1, 30)),
            'updated_at'      => $updated_at = $this->faker->dateTimeBetween($created_at, 'now'),
            'published_at'    => $this->faker->dateTimeBetween($updated_at, 'now'),
        ];
    }

    public function published(): self
    {
        return $this->state(function (array $attributes) {
            return [
                'published_at' => $this->faker->dateTimeBetween($attributes['updated_at'], 'now'),
            ];
        });
    }

    public function draft(): self
    {
        return $this->state(function (array $attributes) {
            return [
                'published_at' => null,
            ];
        });
    }

    public function type(ArticleTypeEnum $articleType): self
    {
        return $this->state(function (array $attributes) use ($articleType) {
            return [
                'article_type_id' => $articleType->getId(),
            ];
        });
    }

    public function sequentialArticleType(): self
    {
        return $this->sequence(
            ...array_map(fn($articleType) => ['article_type_id' => $articleType->getId()], ArticleTypeEnum::all())
        );
    }

    public function configure(): self
    {
        return $this->afterCreating(function (Article $article) {
            $article->addMedia(storage_path('app\testing\post.png'))
                ->preservingOriginal()
                ->toMediaCollection(
                    MediaCollectionEnum::ArticleBanners(),
                    DiskEnum::public()
                );
        });
    }

    private function generateBody(string $product): string
    {
        $body = file_get_contents(base_path('stubs/markdown.article.mdx.stub'));

        $body = str_replace('{{product}}', $product, $body);

        return $body;
    }

    private function generateExcerpt(string $product): string
    {
        return "The {$product} is a great device. It has a great camera, great battery life, and great performance. However, it has a few flaws.";
    }

}
